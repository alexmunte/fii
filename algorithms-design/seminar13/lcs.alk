compute_lcs(seq1, seq2) {
    mem = [];

    for (i = 0; i <= seq2.size(); i = i + 1) {
        mem.pushBack([]);
        for (j = 0; j <= seq1.size(); j = j + 1) {
            mem[i].pushBack(0);
        }
    }
    
    for (j = 1; j <= seq2.size(); j = j + 1) {
        for (i = 1; i <= seq1.size(); i = i + 1) {
            if (seq1[i - 1] == seq2[j - 1]) {
                if (mem[j - 1][i] > mem[j][i - 1]) {
                    mem[j][i] = mem[j - 1][i] + 1;
                } else {
                    mem[j][i] = mem[j][i - 1] + 1;
                }
            } else {
                if (mem[j - 1][i] > mem[j][i - 1]) {
                    mem[j][i] = mem[j - 1][i];
                } else {
                    mem[j][i] = mem[j][i - 1];
                }
            }
        }
    }

    i = seq2.size();
    j = seq1.size();

    longest_seq = [];

    while (mem[i][j] != 0) {
        if (seq1[j - 1] == seq2[i - 1]) {
            longest_seq.pushBack(seq1[j - 1]);
            i = i - 1;
            j = j - 1;
        } else if (mem[i - 1][j] > mem[i][j - 1]) {
            i = i - 1;
        } else {
            j = j - 1;
        }
    }

    return longest_seq;
}

seq1 = [1, 2, 3, 4, 1];
seq2 = [3, 4, 1, 2, 1, 3];

l = compute_lcs(seq1, seq2);
