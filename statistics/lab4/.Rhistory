{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func3 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0(1 - p0) / n);
z_critic = -qnorm(alfa / 2, 0, 1);
vector = c(z_scor, z_critic);
if (abs(z_score) < abs(z_critic))
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func1(0.01, 42, 17, 0.25);
func2(0.01, 42, 17, 0.25);
func3(0.01, 42, 17, 0.25);
func1 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0(1 - p0) / n);
z_critic = qnorm(1 - alfa, 0, 1);
vector = c(z_scor, z_critic);
if (z_score > z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func2 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0(1 - p0) / n);
z_critic = qnorm(alfa, 0, 1);
vector = c(z_scor, z_critic);
if (z_score < z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func3 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0(1 - p0) / n);
z_critic = -qnorm(alfa / 2, 0, 1);
vector = c(z_scor, z_critic);
if (abs(z_score) < abs(z_critic))
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func1(0.01, 42, 17, 0.25);
func2(0.01, 42, 17, 0.25);
func3(0.01, 42, 17, 0.25);
func1 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(1 - alfa, 0, 1);
vector = c(z_scor, z_critic);
if (z_score > z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func2 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(alfa, 0, 1);
vector = c(z_scor, z_critic);
if (z_score < z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func3 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = -qnorm(alfa / 2, 0, 1);
vector = c(z_scor, z_critic);
if (abs(z_score) < abs(z_critic))
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func1(0.01, 42, 17, 0.25);
func2(0.01, 42, 17, 0.25);
func3(0.01, 42, 17, 0.25);
func1 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(1 - alfa, 0, 1);
vector = c(z_score, z_critic);
if (z_score > z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func2 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(alfa, 0, 1);
vector = c(z_score, z_critic);
if (z_score < z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func3 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = -qnorm(alfa / 2, 0, 1);
vector = c(z_score, z_critic);
if (abs(z_score) < abs(z_critic))
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func1(0.01, 42, 17, 0.25);
func2(0.01, 42, 17, 0.25);
func3(0.01, 42, 17, 0.25);
# E o huinea totatala, dar ruleaza...
func1 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(1 - alfa, 0, 1);
vector = c(z_score, z_critic);
if (z_score > z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func2 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(alfa, 0, 1);
vector = c(z_score, z_critic);
if (z_score < z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func3 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = -qnorm(alfa / 2, 0, 1);
vector = c(z_score, z_critic);
if (abs(z_score) < abs(z_critic))
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func1(0.01, 42, 17, 0.25);
func2(0.01, 42, 17, 0.25);
func3(0.01, 42, 17, 0.25);
# E o huinea totatala, dar ruleaza...
func1 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(1 - alfa, 0, 1);
vector = c(z_score, z_critic);
if (z_score > z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func2 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = qnorm(alfa, 0, 1);
vector = c(z_score, z_critic);
if (z_score < z_critic)
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func3 = function(alfa, n, succese, p0)
{
p_prim = succese / n;
z_score = (p_prim - p0) / sqrt(p0 * (1 - p0) / n);
z_critic = -qnorm(alfa / 2, 0, 1);
vector = c(z_score, z_critic);
if (abs(z_score) < abs(z_critic))
{
print("respinsa ");
}
else
{
print("acceptata");
}
return(vector);
}
func1(0.01, 42, 17, 0.25);
func2(0.05, 128, 10, 0.025);
func1(0.05, 110, 15,0.1);
func3(0.05, 150, 20, 0.1);
func1(0.01, 42, 17, 0.25);
func2(0.05, 128, 10, 0.025);
func3(0.05, 128, 10, 0.025);
func3(0.05, 128, 10, 0.025);
func3(0.05, 128, 10, 0.025);
func1(0.05, 110, 15,0.1);
{
func1(0.05, 110, 15,0.1);
func3(0.05, 110, 15,0.1);
func1(0.05, 128, 10, 0.025);
func1(0.05, 128, 10, 0.025);
}
func1(0.05, 128, 10, 0.025);
func2(0.05, 110, 15,0.1);
func2(0.05, 110, 15,0.1);
func1(0.05, 150, 20, 0.1);
# 1
t_conf_interval = function(alfa, mean, n, s)
{
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 2
t_conf_interval(0.1, 44.65, 196, 2.25);
# 3.a
t_conf_interval(0.1, 12, 49, 1.75);
t_conf_interval(0.5, 12, 49, 1.75);
# 3.b
t_conf_interval(0.5, 13.5, 49, 1.35);
# 4
t_conf_interval_file = function(file_name, alfa)
{
f = scan(file_name);
n = length(f);
s = sd(f);
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 5
t_conf_interval_file("esantion.txt", 1);
t_conf_interval_file("esantion.txt", 0.5);
t_conf_interval_file("esantion.txt", 0.1);
load("~/fii/statistics/lab4/esantion.txt")
# 1
t_conf_interval = function(alfa, mean, n, s)
{
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 2
t_conf_interval(0.1, 44.65, 196, 2.25);
# 3.a
t_conf_interval(0.1, 12, 49, 1.75);
t_conf_interval(0.5, 12, 49, 1.75);
# 3.b
t_conf_interval(0.5, 13.5, 49, 1.35);
# 4
t_conf_interval_file = function(file_name, alfa)
{
f = scan(file_name);
n = length(f);
s = sd(f);
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 5
t_conf_interval_file("esantion.txt", 1);
t_conf_interval_file("esantion.txt", 0.5);
t_conf_interval_file("esantion.txt", 0.1);
# 1
t_conf_interval = function(alfa, mean, n, s)
{
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 2
t_conf_interval(0.1, 44.65, 196, 2.25);
# 3.a
t_conf_interval(0.1, 12, 49, 1.75);
t_conf_interval(0.5, 12, 49, 1.75);
# 3.b
t_conf_interval(0.5, 13.5, 49, 1.35);
# 4
t_conf_interval_file = function(file_name, alfa)
{
f = scan(file_name);
n = length(f);
s = sd(f);
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 5
t_conf_interval_file("esantion.txt", 1);
t_conf_interval_file("esantion.txt", 0.5);
t_conf_interval_file("esantion.txt", 0.1);
# 1
t_conf_interval = function(alfa, mean, n, s)
{
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 2
t_conf_interval(0.1, 44.65, 196, 2.25);
# 3.a
t_conf_interval(0.1, 12, 49, 1.75);
t_conf_interval(0.5, 12, 49, 1.75);
# 3.b
t_conf_interval(0.5, 13.5, 49, 1.35);
# 4
t_conf_interval_file = function(file_name, alfa)
{
f = scan(file_name);
n = length(f);
s = sd(f);
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 5
t_conf_interval_file("esantion.txt", 1);
t_conf_interval_file("esantion.txt", 0.5);
t_conf_interval_file("esantion.txt", 0.1);
setwd("~/fii/statistics/lab4")
# 1
t_conf_interval = function(alfa, mean, n, s)
{
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 2
t_conf_interval(0.1, 44.65, 196, 2.25);
# 3.a
t_conf_interval(0.1, 12, 49, 1.75);
t_conf_interval(0.5, 12, 49, 1.75);
# 3.b
t_conf_interval(0.5, 13.5, 49, 1.35);
# 4
t_conf_interval_file = function(file_name, alfa)
{
f = scan(file_name);
n = length(f);
s = sd(f);
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 5
t_conf_interval_file("esantion.txt", 1);
t_conf_interval_file("esantion.txt", 0.5);
t_conf_interval_file("esantion.txt", 0.1);
# 1
t_conf_interval = function(alfa, sample_mean, n, s)
{
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 2
t_conf_interval(0.1, 44.65, 196, 2.25);
# 3.a
t_conf_interval(0.1, 12, 49, 1.75);
t_conf_interval(0.5, 12, 49, 1.75);
# 3.b
t_conf_interval(0.5, 13.5, 49, 1.35);
# 4
t_conf_interval_file = function(file_name, alfa)
{
f = scan(file_name);
n = length(f);
s = sd(f);
sample_mean = mean(f);
se = s / sqrt(n);
critical_t = qt(1 - alfa / 2, n - 1);
a = sample_mean - critical_t * s / sqrt(n);
b = sample_mean + critical_t * s / sqrt(n);
interval = c(a, b);
return(interval);
}
# 5
t_conf_interval_file("esantion.txt", 1);
t_conf_interval_file("esantion.txt", 0.5);
t_conf_interval_file("esantion.txt", 0.1);
t_conf_interval_file("esantion.txt", 0.1);
t_conf_interval_file("esantion.txt", 0.05);
t_conf_interval_file("esantion.txt", 0.01);
